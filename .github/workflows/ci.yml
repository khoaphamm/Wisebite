name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Set working directory for all steps
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: Install uv
      run: |
        pip install uv
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv sync --extra test
        
    - name: Start test database
      run: |
        docker compose -f docker-compose.test.yml up -d test_db
        
    - name: Wait for database to be ready
      run: |
        echo "Waiting for database to be ready..."
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T test_db pg_isready -U test_user -d wisebite_test; do echo "Waiting..."; sleep 2; done'
        echo "Database is ready!"
        
    - name: Run tests with coverage
      env:
        TEST_DATABASE_URL: postgresql+psycopg2://test_user:test_password@localhost:5433/wisebite_test
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5433
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: wisebite_test
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key-for-jwt-tokens-change-this-in-production
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
      if: always()
        
    - name: Test Docker Compose test runner
      run: |
        # Test the containerized test runner as well
        docker compose -f docker-compose.test.yml --profile test up --build test_runner --abort-on-container-exit || echo "Docker test runner completed"
        
    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v
